* 6809 assembly program generated by cmoc 0.1.80


	SECTION	start


program_start	EXPORT
_main	IMPORT
INILIB	IMPORT
_exit	IMPORT
program_start	EQU	*
	LDD	#-1024		stack space in bytes
	LBSR	INILIB		initialize standard library and global variables
	LBSR	_main		call main()
	PSHS	B,A		send main() return value to exit()
	LBSR	_exit		use LBSR to respect calling convention


	ENDSECTION




	SECTION	code


_sample	EXPORT
_control	EXPORT
_flags	EXPORT
_scpos	EXPORT
_frequencyCount	EXPORT
_frequencyState	EXPORT
_bufferPeriod	EXPORT
_noteslist	EXPORT
___va_arg	IMPORT
_abs	IMPORT
_adddww	IMPORT
_atoi	IMPORT
_atol	IMPORT
_atoui	IMPORT
_atoul	IMPORT
_bsearch	IMPORT
_cmpdww	IMPORT
_delay	IMPORT
_divdwb	IMPORT
_divdww	IMPORT
_divmod16	IMPORT
_divmod8	IMPORT
_dwtoa	IMPORT
_enableCMOCFloatSupport	IMPORT
_exit	IMPORT
_fillBuffer	EXPORT


*******************************************************************************

* FUNCTION fillBuffer(): defined at hbsound.c:139
_fillBuffer	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
* Formal parameter(s):
*      5,U:    1 byte : maxFrequencyCount: unsigned char
* Line hbsound.c:140: while
	BRA	L00088		jump to while condition
L00087	EQU	*		while body
* Line hbsound.c:141: if
	LDB	5,U		variable `maxFrequencyCount', declared at hbsound.c:139
* optim: loadCmpZeroBeqOrBne
	BNE	L00091		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00090 removed
* Line hbsound.c:141
* Line hbsound.c:142: assignment: =
	CLR	_frequencyState+0,PCR	variable frequencyState
* Line hbsound.c:143: goto CNTCODE
	BRA	L00073
L00091	EQU	*		else clause of if() started at hbsound.c:141
* Useless label L00092 removed
* Line hbsound.c:146: post-increment
	INC	_frequencyCount+0,PCR
* Line hbsound.c:148: if
	LDB	_frequencyCount+0,PCR	variable frequencyCount
	CMPB	5,U		variable maxFrequencyCount
	BNE	L00094		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00093 removed
* Line hbsound.c:148
* Line hbsound.c:149: assignment: =
	LDB	_frequencyState+0,PCR	variable `frequencyState', declared at hbsound.c:53
* optim: optimizeLoadTest
	LBSR	tfrZtoB
	STB	_frequencyState+0,PCR
* Line hbsound.c:150: assignment: =
	CLR	_frequencyCount+0,PCR	variable frequencyCount
L00094	EQU	*		else clause of if() started at hbsound.c:148
* Useless label L00095 removed
* Line hbsound.c:153: labeled statement
L00073	EQU	*		label CNTCODE, declared at hbsound.c:152
* Line hbsound.c:153: assignment: =
	LDB	_frequencyState+0,PCR	variable `frequencyState', declared at hbsound.c:53
* optim: stripExtraPushPullB
* optim: optimizeLdx
* optim: stripExtraPushPullB
	STB	[_sample+0,PCR]	optim: optimizeLdx
L00088	EQU	*		while condition at hbsound.c:140
	CLRA
* optim: stripConsecutiveLoadsToSameReg
* PSHS B,A optim: optimizeStackOperations1
	LDB	[_flags+0,PCR]	indirection
* optim: stripExtraClrA_B
	CMPD	#2		optim: optimizeStackOperations1
	BNE	L00087
* optim: branchToNextLocation
* Useless label L00089 removed
* Useless label L00074 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION fillBuffer(): defined at hbsound.c:139
funcend_fillBuffer	EQU *
funcsize_fillBuffer	EQU	funcend_fillBuffer-_fillBuffer
_isalnum	IMPORT
_isalpha	IMPORT
_isdigit	IMPORT
_isspace	IMPORT
_itoa10	IMPORT
_labs	IMPORT
_ltoa10	IMPORT
_main	EXPORT


*******************************************************************************

* FUNCTION main(): defined at hbsound.c:158
_main	EQU	*
* Calling convention: Default
	PSHS	U
	LEAU	,S
	LEAS	-4,S
* Local non-static variable(s):
*     -4,U:    2 bytes: tones: unsigned int
*     -2,U:    2 bytes: note: unsigned int
* Line hbsound.c:160: function call: setConsoleOutHook()
	LEAX	_newOutputRoutine,PCR	address of newOutputRoutine(), defined at hbsound.c:121
	PSHS	X		optim: optimizeTfrPush
* optim: optimizeTfrPush
	LBSR	_setConsoleOutHook
	LEAS	2,S
* Line hbsound.c:163: function call: printf()
	CLRA
	LDB	#$1B		decimal 27 signed
	PSHS	B,A		argument 2 of printf(): int
	LEAX	S00076,PCR	"%c[2J"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	4,S
* Line hbsound.c:164: function call: printf()
	LEAX	S00077,PCR	"---------------+\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:165: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:166: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:167: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:168: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:169: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:170: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:171: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:172: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:173: function call: printf()
	LEAX	S00078,PCR	"               |\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:174: function call: printf()
	LEAX	S00077,PCR	"---------------+\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:175: function call: printf()
	LEAX	S00079,PCR	"Frame Note Tone\n\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:176: function call: printf()
	LEAX	S00080,PCR	"PathiTrack6809 (C) - 2023 D.Collins\n\n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:177: function call: printf()
	LEAX	S00081,PCR	"Mario Bros Ground Theme \n"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:178: function call: printf()
	LEAX	S00082,PCR	"Original Arr. Koji Kondo,1985"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	2,S
* Line hbsound.c:180: function call: printf()
	CLRA
	LDB	#$1B		decimal 27 signed
	PSHS	B,A		argument 2 of printf(): int
	LEAX	S00083,PCR	"%c[H"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	4,S
* Line hbsound.c:182: assignment: =
	CLRA
* LDB #$03 optim: optimizeStackOperations1
* PSHS B optim: optimizeStackOperations1
* optim: optimizeLdx
	LDB	#3		optim: optimizeStackOperations1
	STB	[_control+0,PCR]	optim: optimizeLdx
* Line hbsound.c:183: init of variable tones
* optim: stripExtraClrA_B
	LDB	#$D3		211
	STD	-4,U		variable tones
* Line hbsound.c:185: for init
* Line hbsound.c:185: assignment: =
* optim: removeClr
	CLRB
	STD	-2,U
	LBRA	L00097		jump to for condition
L00096	EQU	*
* Line hbsound.c:185: for body
* Line hbsound.c:186: post-increment
	INC	_scpos+0,PCR
* Line hbsound.c:187: if
	LDB	_scpos+0,PCR	variable scpos
	CMPB	#$09
	BNE	L00101		 (optim: condBranchOverUncondBranch)
* optim: condBranchOverUncondBranch
* Useless label L00100 removed
* Line hbsound.c:187
* Line hbsound.c:188: function call: printf()
	CLRA
	LDB	#$1B		decimal 27 signed
	PSHS	B,A		argument 2 of printf(): int
	LEAX	S00083,PCR	"%c[H"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	4,S
* Line hbsound.c:189: assignment: =
	CLR	_scpos+0,PCR	variable scpos
L00101	EQU	*		else clause of if() started at hbsound.c:187
* Useless label L00102 removed
* Line hbsound.c:191: function call: printf()
	LDD	-2,U		variable note
	LEAX	_noteslist+0,PCR	address of array noteslist
* optimizeLoadDX
	LDB	D,X		get r-value
	CLRA			promoting byte argument to word
	PSHS	B,A		argument 3 of printf(): unsigned char
	LDD	-2,U		variable `note', declared at hbsound.c:184
	PSHS	B,A		argument 2 of printf(): unsigned int
	LEAX	S00084,PCR	"\n    : %3d | %2d"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	6,S
* Line hbsound.c:193: while
	BRA	L00104		jump to while condition
* Useless label L00103 removed
* Line hbsound.c:194: while
* optim: instrFollowingUncondBranch
L00106	EQU	*		while body
L00107	EQU	*		while condition at hbsound.c:194
	CLRA
* optim: stripConsecutiveLoadsToSameReg
* PSHS B,A optim: optimizeStackOperations1
	LDB	[_flags+0,PCR]	indirection
* optim: stripExtraClrA_B
	CMPD	#1		optim: optimizeStackOperations1
	BNE	L00106
* optim: branchToNextLocation
* Useless label L00108 removed
* Line hbsound.c:197: post-increment
	LDX	_bufferPeriod+0,PCR	variable `bufferPeriod', declared at hbsound.c:197
	LEAX	1,X
	STX	_bufferPeriod+0,PCR
* Line hbsound.c:198: function call: fillBuffer()
	LDD	-2,U		variable note
	LEAX	_noteslist+0,PCR	address of array noteslist
	LEAX	D,X		add offset
	LDB	,X		get r-value
	CLRA			promoting byte argument to word
	PSHS	B,A		argument 1 of fillBuffer(): unsigned char
	LBSR	_fillBuffer
	LEAS	2,S
* Line hbsound.c:200: function call: printf()
	LDX	_bufferPeriod+0,PCR	optim: transformPshsDPshsD
* optim: optimizePshsOps
	CLRA
	LDB	#$0D		decimal 13 signed
	PSHS	X,B,A		optim: optimizePshsOps
	LEAX	S00085,PCR	"%c%d"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	6,S
L00104	EQU	*		while condition at hbsound.c:193
	LDD	_bufferPeriod+0,PCR	variable bufferPeriod
	CMPD	#$55
	BNE	L00107
* optim: branchToNextLocation
* Useless label L00105 removed
* Line hbsound.c:202: assignment: =
	CLR	_frequencyCount+0,PCR	variable frequencyCount
* Line hbsound.c:203: assignment: =
	CLR	_frequencyState+0,PCR	variable frequencyState
* Line hbsound.c:204: assignment: =
	CLRA
	CLRB
	STD	_bufferPeriod+0,PCR
* Useless label L00098 removed
* Line hbsound.c:185: for increment(s)
	LDD	-2,U
	ADDD	#1
	STD	-2,U
L00097	EQU	*
* Line hbsound.c:185: for condition
	LDD	-2,U		variable note
	CMPD	-4,U		variable tones
	LBLO	L00096
* optim: branchToNextLocation
* Useless label L00099 removed
* Line hbsound.c:206: assignment: =
	CLR	_scpos+0,PCR	variable scpos
* Line hbsound.c:207: assignment: =
	CLRA
	CLRB
* optim: stripExtraPushPullB
* optim: optimizeLdx
* optim: stripExtraPushPullB
	STB	[_control+0,PCR]	optim: optimizeLdx
* Line hbsound.c:208: function call: printf()
	LDB	#$1B		optim: removeAndOrMulAddSub
	PSHS	B,A		argument 2 of printf(): int
	LEAX	S00086,PCR	"%c[18;0H"
	PSHS	X		argument 1 of printf(): const char[]
	LBSR	_printf
	LEAS	4,S
* Line hbsound.c:209: function call: softStart()
	LBSR	_softStart
* Line hbsound.c:210: return with value
	CLRA
	CLRB
* optim: branchToNextLocation
* Useless label L00075 removed
	LEAS	,U
	PULS	U,PC
* END FUNCTION main(): defined at hbsound.c:158
funcend_main	EQU *
funcsize_main	EQU	funcend_main-_main
_memchr	IMPORT
_memcmp	IMPORT
_memcpy	IMPORT
_memichr	IMPORT
_memicmp	IMPORT
_memmove	IMPORT
_memset	IMPORT
_memset16	IMPORT
_mulwb	IMPORT
_mulww	IMPORT
_newOutputRoutine	EXPORT


*******************************************************************************

* FUNCTION newOutputRoutine(): defined at hbsound.c:121
_newOutputRoutine	EQU	*
* Assembly-only function.
* Line hbsound.c:122: inline assembly
* Inline assembly:


        pshs x,b
        swi
        fcb 1
        puls b,x
    

* End of inline assembly.
* Useless label L00071 removed
	RTS
* END FUNCTION newOutputRoutine(): defined at hbsound.c:121
funcend_newOutputRoutine	EQU *
funcsize_newOutputRoutine	EQU	funcend_newOutputRoutine-_newOutputRoutine
_printf	IMPORT
_putchar	IMPORT
_putstr	IMPORT
_qsort	IMPORT
_rand	IMPORT
_readline	IMPORT
_readword	IMPORT
_sbrk	IMPORT
_sbrkmax	IMPORT
_setConsoleOutHook	IMPORT
_set_null_ptr_handler	IMPORT
_set_stack_overflow_handler	IMPORT
_softStart	EXPORT


*******************************************************************************

* FUNCTION softStart(): defined at hbsound.c:131
_softStart	EQU	*
* Assembly-only function.
* Line hbsound.c:132: inline assembly
* Inline assembly:


        swi
        fcb 8
    

* End of inline assembly.
* Useless label L00072 removed
	RTS
* END FUNCTION softStart(): defined at hbsound.c:131
funcend_softStart	EQU *
funcsize_softStart	EQU	funcend_softStart-_softStart
_sprintf	IMPORT
_sqrt16	IMPORT
_srand	IMPORT
_strcat	IMPORT
_strchr	IMPORT
_strcmp	IMPORT
_strcpy	IMPORT
_stricmp	IMPORT
_strlen	IMPORT
_strlwr	IMPORT
_strncmp	IMPORT
_strncpy	IMPORT
_strstr	IMPORT
_strtol	IMPORT
_strtoul	IMPORT
_strupr	IMPORT
_subdww	IMPORT
_tolower	IMPORT
_toupper	IMPORT
_ultoa10	IMPORT
_utoa10	IMPORT
_vprintf	IMPORT
_vsprintf	IMPORT
_zerodw	IMPORT


	ENDSECTION




	SECTION	initgl_start


INITGL	EXPORT
INITGL	EQU	*


	ENDSECTION




	SECTION	initgl




*******************************************************************************

* Initialize global variables.


	ENDSECTION




	SECTION	rodata


string_literals_start	EQU	*


*******************************************************************************

* STRING LITERALS
S00076	EQU	*
	FCC	"%c[2J"
	FCB	0
S00077	EQU	*
	FCC	"---------------+"
	FCB	$0A
	FCB	0
S00078	EQU	*
	FCC	"               |"
	FCB	$0A
	FCB	0
S00079	EQU	*
	FCC	"Frame Note Tone"
	FCB	$0A
	FCB	$0A
	FCB	0
S00080	EQU	*
	FCC	"PathiTrack6809 (C) - 2023 D.Collins"
	FCB	$0A
	FCB	$0A
	FCB	0
S00081	EQU	*
	FCC	"Mario Bros Ground Theme "
	FCB	$0A
	FCB	0
S00082	EQU	*
	FCC	"Original Arr. Koji Kondo,1985"
	FCB	0
S00083	EQU	*
	FCC	"%c[H"
	FCB	0
S00084	EQU	*
	FCB	$0A
	FCC	"    : %3d | %2d"
	FCB	0
S00085	EQU	*
	FCC	"%c%d"
	FCB	0
S00086	EQU	*
	FCC	"%c[18;0H"
	FCB	0
string_literals_end	EQU	*


*******************************************************************************

* READ-ONLY GLOBAL VARIABLES


	ENDSECTION




	SECTION	rwdata


* Statically-initialized global variables
_sample	EQU	*		sample: unsigned char *
	FDB	$9000		decimal 36864
_control	EQU	*		control: unsigned char *
	FDB	$9001		decimal 36865
_flags	EQU	*		flags: unsigned char *
	FDB	$9000		decimal 36864
_scpos	EQU	*		scpos: unsigned char
	FCB	$00		decimal 0
_frequencyCount	EQU	*		frequencyCount: unsigned char
	FCB	$00		decimal 0
_frequencyState	EQU	*		frequencyState: unsigned char
	FCB	$00		decimal 0
_bufferPeriod	EQU	*		bufferPeriod: unsigned int
	FDB	$00		decimal 0
_noteslist	EQU	*		noteslist: unsigned char[]
* Element 0 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 1 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 2 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 3 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 4 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 5 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 6 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 7 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 8 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 9 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 10 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 11 of array, of type unsigned char
	FCB	$2C		decimal 44
* Element 12 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 13 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 14 of array, of type unsigned char
	FCB	$1F		decimal 31
* Element 15 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 16 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 17 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 18 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 19 of array, of type unsigned char
	FCB	$10		decimal 16
* Element 20 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 21 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 22 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 23 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 24 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 25 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 26 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 27 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 28 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 29 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 30 of array, of type unsigned char
	FCB	$2C		decimal 44
* Element 31 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 32 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 33 of array, of type unsigned char
	FCB	$1F		decimal 31
* Element 34 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 35 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 36 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 37 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 38 of array, of type unsigned char
	FCB	$10		decimal 16
* Element 39 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 40 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 41 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 42 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 43 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 44 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 45 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 46 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 47 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 48 of array, of type unsigned char
	FCB	$13		decimal 19
* Element 49 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 50 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 51 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 52 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 53 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 54 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 55 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 56 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 57 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 58 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 59 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 60 of array, of type unsigned char
	FCB	$13		decimal 19
* Element 61 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 62 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 63 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 64 of array, of type unsigned char
	FCB	$0E		decimal 14
* Element 65 of array, of type unsigned char
	FCB	$0E		decimal 14
* Element 66 of array, of type unsigned char
	FCB	$0E		decimal 14
* Element 67 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 68 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 69 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 70 of array, of type unsigned char
	FCB	$13		decimal 19
* Element 71 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 72 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 73 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 74 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 75 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 76 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 77 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 78 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 79 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 80 of array, of type unsigned char
	FCB	$17		decimal 23
* Element 81 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 82 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 83 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 84 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 85 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 86 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 87 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 88 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 89 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 90 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 91 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 92 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 93 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 94 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 95 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 96 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 97 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 98 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 99 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 100 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 101 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 102 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 103 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 104 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 105 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 106 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 107 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 108 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 109 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 110 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 111 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 112 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 113 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 114 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 115 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 116 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 117 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 118 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 119 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 120 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 121 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 122 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 123 of array, of type unsigned char
	FCB	$2C		decimal 44
* Element 124 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 125 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 126 of array, of type unsigned char
	FCB	$1F		decimal 31
* Element 127 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 128 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 129 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 130 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 131 of array, of type unsigned char
	FCB	$10		decimal 16
* Element 132 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 133 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 134 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 135 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 136 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 137 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 138 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 139 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 140 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 141 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 142 of array, of type unsigned char
	FCB	$2C		decimal 44
* Element 143 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 144 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 145 of array, of type unsigned char
	FCB	$1F		decimal 31
* Element 146 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 147 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 148 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 149 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 150 of array, of type unsigned char
	FCB	$10		decimal 16
* Element 151 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 152 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 153 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 154 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 155 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 156 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 157 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 158 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 159 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 160 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 161 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 162 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 163 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 164 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 165 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 166 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 167 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 168 of array, of type unsigned char
	FCB	$10		decimal 16
* Element 169 of array, of type unsigned char
	FCB	$10		decimal 16
* Element 170 of array, of type unsigned char
	FCB	$10		decimal 16
* Element 171 of array, of type unsigned char
	FCB	$12		decimal 18
* Element 172 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 173 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 174 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 175 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 176 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 177 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 178 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 179 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 180 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 181 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 182 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 183 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 184 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 185 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 186 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 187 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 188 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 189 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 190 of array, of type unsigned char
	FCB	$15		decimal 21
* Element 191 of array, of type unsigned char
	FCB	$16		decimal 22
* Element 192 of array, of type unsigned char
	FCB	$19		decimal 25
* Element 193 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 194 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 195 of array, of type unsigned char
	FCB	$2C		decimal 44
* Element 196 of array, of type unsigned char
	FCB	$37		decimal 55
* Element 197 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 198 of array, of type unsigned char
	FCB	$00		decimal 0
* Element 199 of array, of type unsigned char
	FCB	$1C		decimal 28
* Element 200 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 201 of array, of type unsigned char
	FCB	$2C		decimal 44
* Element 202 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 203 of array, of type unsigned char
	FCB	$1D		decimal 29
* Element 204 of array, of type unsigned char
	FCB	$21		decimal 33
* Element 205 of array, of type unsigned char
	FCB	$23		decimal 35
* Element 206 of array, of type unsigned char
	FCB	$1F		decimal 31
* Element 207 of array, of type unsigned char
	FCB	$23		decimal 35
* Element 208 of array, of type unsigned char
	FCB	$25		decimal 37
* Element 209 of array, of type unsigned char
	FCB	$27		decimal 39
* Element 210 of array, of type unsigned char
	FCB	$25		decimal 37
* Statically-initialized local static variables


	ENDSECTION




	SECTION	bss


bss_start	EQU	*
* Uninitialized global variables
* Uninitialized local static variables
bss_end	EQU	*


	ENDSECTION




	SECTION	initgl_end


	RTS			end of global variable initialization


	ENDSECTION




*******************************************************************************



	SECTION	program_end


program_end	EXPORT
program_end	EQU	*


	ENDSECTION




*******************************************************************************

* Importing 3 utility routine(s).
_printf	IMPORT
_setConsoleOutHook	IMPORT
tfrZtoB	IMPORT


*******************************************************************************

	END
